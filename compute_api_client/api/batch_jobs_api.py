# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from compute_api_client.api_client import ApiClient
from compute_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BatchJobsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_batch_job_batch_jobs_post(self, batch_job_in, **kwargs):  # noqa: E501
        """Create batch job  # noqa: E501

        Create new batch job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_batch_job_batch_jobs_post(batch_job_in, async_req=True)
        >>> result = thread.get()

        :param batch_job_in: (required)
        :type batch_job_in: BatchJobIn
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchJob
        """
        kwargs['_return_http_data_only'] = True
        return self.create_batch_job_batch_jobs_post_with_http_info(batch_job_in, **kwargs)  # noqa: E501

    def create_batch_job_batch_jobs_post_with_http_info(self, batch_job_in, **kwargs):  # noqa: E501
        """Create batch job  # noqa: E501

        Create new batch job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_batch_job_batch_jobs_post_with_http_info(batch_job_in, async_req=True)
        >>> result = thread.get()

        :param batch_job_in: (required)
        :type batch_job_in: BatchJobIn
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchJob, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'batch_job_in'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_batch_job_batch_jobs_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'batch_job_in' is set
        if self.api_client.client_side_validation and local_var_params.get('batch_job_in') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `batch_job_in` when calling `create_batch_job_batch_jobs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_job_in' in local_var_params:
            body_params = local_var_params['batch_job_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['user']  # noqa: E501

        response_types_map = {
            201: "BatchJob",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/batch_jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def enqueue_batch_job_batch_jobs_id_enqueue_patch(self, id, **kwargs):  # noqa: E501
        """Enqueue batch job for execution  # noqa: E501

        Enqueue batch job for execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enqueue_batch_job_batch_jobs_id_enqueue_patch(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchJob
        """
        kwargs['_return_http_data_only'] = True
        return self.enqueue_batch_job_batch_jobs_id_enqueue_patch_with_http_info(id, **kwargs)  # noqa: E501

    def enqueue_batch_job_batch_jobs_id_enqueue_patch_with_http_info(self, id, **kwargs):  # noqa: E501
        """Enqueue batch job for execution  # noqa: E501

        Enqueue batch job for execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enqueue_batch_job_batch_jobs_id_enqueue_patch_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchJob, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enqueue_batch_job_batch_jobs_id_enqueue_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and local_var_params.get('id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `enqueue_batch_job_batch_jobs_id_enqueue_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user']  # noqa: E501

        response_types_map = {
            200: "BatchJob",
            404: "HTTPNotFoundError",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/batch_jobs/{id}/enqueue', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def finish_batch_job_batch_jobs_id_finish_patch(self, id, **kwargs):  # noqa: E501
        """Finish batch job  # noqa: E501

        Finish batch job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.finish_batch_job_batch_jobs_id_finish_patch(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchJob
        """
        kwargs['_return_http_data_only'] = True
        return self.finish_batch_job_batch_jobs_id_finish_patch_with_http_info(id, **kwargs)  # noqa: E501

    def finish_batch_job_batch_jobs_id_finish_patch_with_http_info(self, id, **kwargs):  # noqa: E501
        """Finish batch job  # noqa: E501

        Finish batch job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.finish_batch_job_batch_jobs_id_finish_patch_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchJob, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finish_batch_job_batch_jobs_id_finish_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and local_var_params.get('id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `finish_batch_job_batch_jobs_id_finish_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['backend', 'user']  # noqa: E501

        response_types_map = {
            200: "BatchJob",
            404: "HTTPNotFoundError",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/batch_jobs/{id}/finish', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def peek_batch_job_batch_jobs_peek_patch(self, request_body, **kwargs):  # noqa: E501
        """Peek batch job  # noqa: E501

        Get batch job that can be taken up, excluding list of IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.peek_batch_job_batch_jobs_peek_patch(request_body, async_req=True)
        >>> result = thread.get()

        :param request_body: (required)
        :type request_body: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchJob
        """
        kwargs['_return_http_data_only'] = True
        return self.peek_batch_job_batch_jobs_peek_patch_with_http_info(request_body, **kwargs)  # noqa: E501

    def peek_batch_job_batch_jobs_peek_patch_with_http_info(self, request_body, **kwargs):  # noqa: E501
        """Peek batch job  # noqa: E501

        Get batch job that can be taken up, excluding list of IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.peek_batch_job_batch_jobs_peek_patch_with_http_info(request_body, async_req=True)
        >>> result = thread.get()

        :param request_body: (required)
        :type request_body: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchJob, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method peek_batch_job_batch_jobs_peek_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'request_body' is set
        if self.api_client.client_side_validation and local_var_params.get('request_body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `request_body` when calling `peek_batch_job_batch_jobs_peek_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PATCH', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['backend']  # noqa: E501

        response_types_map = {
            200: "BatchJob",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/batch_jobs/peek', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def pop_batch_job_batch_jobs_pop_patch(self, **kwargs):  # noqa: E501
        """Take batch job  # noqa: E501

        Claim batch job by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pop_batch_job_batch_jobs_pop_patch(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchJob
        """
        kwargs['_return_http_data_only'] = True
        return self.pop_batch_job_batch_jobs_pop_patch_with_http_info(**kwargs)  # noqa: E501

    def pop_batch_job_batch_jobs_pop_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Take batch job  # noqa: E501

        Claim batch job by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pop_batch_job_batch_jobs_pop_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchJob, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pop_batch_job_batch_jobs_pop_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['backend']  # noqa: E501

        response_types_map = {
            200: "BatchJob",
            404: "HTTPNotFoundError",
        }

        return self.api_client.call_api(
            '/batch_jobs/pop', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def read_batch_jobs_batch_jobs_get(self, **kwargs):  # noqa: E501
        """List batch jobs  # noqa: E501

        List batch jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_batch_jobs_batch_jobs_get(async_req=True)
        >>> result = thread.get()

        :param latest:
        :type latest: bool
        :param id:
        :type id: int
        :param created_on:
        :type created_on: datetime
        :param status:
        :type status: BatchJobStatus
        :param user_id:
        :type user_id: int
        :param backend_type_id:
        :type backend_type_id: int
        :param backend_id__isnull:
        :type backend_id__isnull: bool
        :param backend_id:
        :type backend_id: int
        :param queued_at__isnull:
        :type queued_at__isnull: bool
        :param queued_at:
        :type queued_at: datetime
        :param reserved_at__isnull:
        :type reserved_at__isnull: bool
        :param reserved_at:
        :type reserved_at: datetime
        :param finished_at__isnull:
        :type finished_at__isnull: bool
        :param finished_at:
        :type finished_at: datetime
        :param aggregated_algorithm_type:
        :type aggregated_algorithm_type: AlgorithmType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[BatchJob]
        """
        kwargs['_return_http_data_only'] = True
        return self.read_batch_jobs_batch_jobs_get_with_http_info(**kwargs)  # noqa: E501

    def read_batch_jobs_batch_jobs_get_with_http_info(self, **kwargs):  # noqa: E501
        """List batch jobs  # noqa: E501

        List batch jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_batch_jobs_batch_jobs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param latest:
        :type latest: bool
        :param id:
        :type id: int
        :param created_on:
        :type created_on: datetime
        :param status:
        :type status: BatchJobStatus
        :param user_id:
        :type user_id: int
        :param backend_type_id:
        :type backend_type_id: int
        :param backend_id__isnull:
        :type backend_id__isnull: bool
        :param backend_id:
        :type backend_id: int
        :param queued_at__isnull:
        :type queued_at__isnull: bool
        :param queued_at:
        :type queued_at: datetime
        :param reserved_at__isnull:
        :type reserved_at__isnull: bool
        :param reserved_at:
        :type reserved_at: datetime
        :param finished_at__isnull:
        :type finished_at__isnull: bool
        :param finished_at:
        :type finished_at: datetime
        :param aggregated_algorithm_type:
        :type aggregated_algorithm_type: AlgorithmType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[BatchJob], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'latest',
            'id',
            'created_on',
            'status',
            'user_id',
            'backend_type_id',
            'backend_id__isnull',
            'backend_id',
            'queued_at__isnull',
            'queued_at',
            'reserved_at__isnull',
            'reserved_at',
            'finished_at__isnull',
            'finished_at',
            'aggregated_algorithm_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_batch_jobs_batch_jobs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('latest') is not None:  # noqa: E501
            query_params.append(('latest', local_var_params['latest']))  # noqa: E501
        if local_var_params.get('id') is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if local_var_params.get('created_on') is not None:  # noqa: E501
            query_params.append(('created_on', local_var_params['created_on']))  # noqa: E501
        if local_var_params.get('status') is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if local_var_params.get('user_id') is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if local_var_params.get('backend_type_id') is not None:  # noqa: E501
            query_params.append(('backend_type_id', local_var_params['backend_type_id']))  # noqa: E501
        if local_var_params.get('backend_id__isnull') is not None:  # noqa: E501
            query_params.append(('backend_id__isnull', local_var_params['backend_id__isnull']))  # noqa: E501
        if local_var_params.get('backend_id') is not None:  # noqa: E501
            query_params.append(('backend_id', local_var_params['backend_id']))  # noqa: E501
        if local_var_params.get('queued_at__isnull') is not None:  # noqa: E501
            query_params.append(('queued_at__isnull', local_var_params['queued_at__isnull']))  # noqa: E501
        if local_var_params.get('queued_at') is not None:  # noqa: E501
            query_params.append(('queued_at', local_var_params['queued_at']))  # noqa: E501
        if local_var_params.get('reserved_at__isnull') is not None:  # noqa: E501
            query_params.append(('reserved_at__isnull', local_var_params['reserved_at__isnull']))  # noqa: E501
        if local_var_params.get('reserved_at') is not None:  # noqa: E501
            query_params.append(('reserved_at', local_var_params['reserved_at']))  # noqa: E501
        if local_var_params.get('finished_at__isnull') is not None:  # noqa: E501
            query_params.append(('finished_at__isnull', local_var_params['finished_at__isnull']))  # noqa: E501
        if local_var_params.get('finished_at') is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if local_var_params.get('aggregated_algorithm_type') is not None:  # noqa: E501
            query_params.append(('aggregated_algorithm_type', local_var_params['aggregated_algorithm_type']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user']  # noqa: E501

        response_types_map = {
            200: "list[BatchJob]",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/batch_jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
